{"ast":null,"code":"import _toConsumableArray from \"/Users/shubhamsingh/Projects/riny-designs/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nexport { castArray as ensureArray } from 'lodash-unified';\nvar unique = function unique(arr) {\n  return _toConsumableArray(new Set(arr));\n};\nvar castArray = function castArray(arr) {\n  if (!arr && arr !== 0) return [];\n  return Array.isArray(arr) ? arr : [arr];\n};\nexport { castArray, unique };","map":{"version":3,"names":["unique","arr","_toConsumableArray","Set","castArray","Array","isArray"],"sources":["../../../../packages/utils/arrays.ts"],"sourcesContent":["export const unique = <T>(arr: T[]) => [...new Set(arr)]\n\ntype Many<T> = T | ReadonlyArray<T>\n// TODO: rename to `ensureArray`\n/** like `_.castArray`, except falsy value returns empty array. */\nexport const castArray = <T>(arr: Many<T>): T[] => {\n  if (!arr && (arr as any) !== 0) return []\n  return Array.isArray(arr) ? arr : [arr]\n}\n\n// TODO: remove import alias\n// avoid naming conflicts\nexport { castArray as ensureArray } from 'lodash-unified'\n"],"mappings":";;;;;;;AAAY,IAACA,MAAM,GAAG,SAATA,MAAMA,CAAIC,GAAG;EAAA,OAAAC,kBAAA,CAAS,IAAIC,GAAG,CAACF,GAAG,CAAC;AAAA;AACnC,IAACG,SAAS,GAAG,SAAZA,SAASA,CAAIH,GAAG,EAAK;EAChC,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,CAAC,EACnB,OAAO,EAAE;EACX,OAAOI,KAAK,CAACC,OAAO,CAACL,GAAG,CAAC,GAAGA,GAAG,GAAG,CAACA,GAAG,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}