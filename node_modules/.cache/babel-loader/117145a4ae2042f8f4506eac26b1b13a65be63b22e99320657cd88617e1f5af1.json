{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { ref, getCurrentInstance, inject, computed, unref } from 'vue';\nimport '../../utils/index.mjs';\nimport { isNumber } from '../../utils/types.mjs';\nvar zIndex = ref(0);\nvar defaultInitialZIndex = 2e3;\nvar zIndexContextKey = Symbol(\"zIndexContextKey\");\nvar useZIndex = function useZIndex(zIndexOverrides) {\n  var zIndexInjection = zIndexOverrides || (getCurrentInstance() ? inject(zIndexContextKey, void 0) : void 0);\n  var initialZIndex = computed(function () {\n    var zIndexFromInjection = unref(zIndexInjection);\n    return isNumber(zIndexFromInjection) ? zIndexFromInjection : defaultInitialZIndex;\n  });\n  var currentZIndex = computed(function () {\n    return initialZIndex.value + zIndex.value;\n  });\n  var nextZIndex = function nextZIndex() {\n    zIndex.value++;\n    return currentZIndex.value;\n  };\n  return {\n    initialZIndex: initialZIndex,\n    currentZIndex: currentZIndex,\n    nextZIndex: nextZIndex\n  };\n};\nexport { defaultInitialZIndex, useZIndex, zIndexContextKey };","map":{"version":3,"names":["zIndex","ref","defaultInitialZIndex","zIndexContextKey","Symbol","useZIndex","zIndexOverrides","zIndexInjection","getCurrentInstance","inject","initialZIndex","computed","zIndexFromInjection","unref","isNumber","currentZIndex","value","nextZIndex"],"sources":["../../../../../packages/hooks/use-z-index/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, ref, unref } from 'vue'\nimport { isNumber } from '@element-plus/utils'\n\nimport type { InjectionKey, Ref } from 'vue'\n\nconst zIndex = ref(0)\nexport const defaultInitialZIndex = 2000\n\nexport const zIndexContextKey: InjectionKey<Ref<number | undefined>> =\n  Symbol('zIndexContextKey')\n\nexport const useZIndex = (zIndexOverrides?: Ref<number>) => {\n  const zIndexInjection =\n    zIndexOverrides ||\n    (getCurrentInstance() ? inject(zIndexContextKey, undefined) : undefined)\n  const initialZIndex = computed(() => {\n    const zIndexFromInjection = unref(zIndexInjection)\n    return isNumber(zIndexFromInjection)\n      ? zIndexFromInjection\n      : defaultInitialZIndex\n  })\n  const currentZIndex = computed(() => initialZIndex.value + zIndex.value)\n\n  const nextZIndex = () => {\n    zIndex.value++\n    return currentZIndex.value\n  }\n\n  return {\n    initialZIndex,\n    currentZIndex,\n    nextZIndex,\n  }\n}\n\nexport type UseZIndexReturn = ReturnType<typeof useZIndex>\n"],"mappings":";;;;;;AAEA,IAAMA,MAAM,GAAGC,GAAG,CAAC,CAAC,CAAC;AACT,IAACC,oBAAoB,GAAG;AACxB,IAACC,gBAAgB,GAAGC,MAAM,CAAC,kBAAkB;AAC7C,IAACC,SAAS,GAAG,SAAZA,SAASA,CAAIC,eAAe,EAAK;EAC5C,IAAMC,eAAe,GAAGD,eAAe,KAAKE,kBAAkB,EAAE,GAAGC,MAAM,CAACN,gBAAgB,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;EAC7G,IAAMO,aAAa,GAAGC,QAAQ,CAAC,YAAM;IACnC,IAAMC,mBAAmB,GAAGC,KAAK,CAACN,eAAe,CAAC;IAClD,OAAOO,QAAQ,CAACF,mBAAmB,CAAC,GAAGA,mBAAmB,GAAGV,oBAAoB;EACrF,CAAG,CAAC;EACF,IAAMa,aAAa,GAAGJ,QAAQ,CAAC;IAAA,OAAMD,aAAa,CAACM,KAAK,GAAGhB,MAAM,CAACgB,KAAK;EAAA,EAAC;EACxE,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAA,EAAS;IACvBjB,MAAM,CAACgB,KAAK,EAAE;IACd,OAAOD,aAAa,CAACC,KAAK;EAC9B,CAAG;EACD,OAAO;IACLN,aAAa,EAAbA,aAAa;IACbK,aAAa,EAAbA,aAAa;IACbE,UAAU,EAAVA;EACJ,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}