{"ast":null,"code":"import _defineProperty from \"/Users/shubhamsingh/Projects/riny-designs/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/Users/shubhamsingh/Projects/riny-designs/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, inject, computed, openBlock, createElementBlock, unref, normalizeClass, normalizeStyle, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createBlock, resolveDynamicComponent, createCommentVNode } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { dialogInjectionKey } from './constants.mjs';\nimport { dialogContentProps, dialogContentEmits } from './dialog-content.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { CloseComponents } from '../../../utils/vue/icon.mjs';\nimport { FOCUS_TRAP_INJECTION_KEY } from '../../focus-trap/src/tokens.mjs';\nimport { composeRefs } from '../../../utils/vue/refs.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nvar _hoisted_1 = [\"aria-level\"];\nvar _hoisted_2 = [\"aria-label\"];\nvar _hoisted_3 = [\"id\"];\nvar __default__ = defineComponent({\n  name: \"ElDialogContent\"\n});\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialogContentProps,\n  emits: dialogContentEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var _useLocale = useLocale(),\n      t = _useLocale.t;\n    var Close = CloseComponents.Close;\n    var _inject = inject(dialogInjectionKey),\n      dialogRef = _inject.dialogRef,\n      headerRef = _inject.headerRef,\n      bodyId = _inject.bodyId,\n      ns = _inject.ns,\n      style = _inject.style;\n    var _inject2 = inject(FOCUS_TRAP_INJECTION_KEY),\n      focusTrapRef = _inject2.focusTrapRef;\n    var dialogKls = computed(function () {\n      return [ns.b(), ns.is(\"fullscreen\", props.fullscreen), ns.is(\"draggable\", props.draggable), ns.is(\"align-center\", props.alignCenter), _defineProperty({}, ns.m(\"center\"), props.center), props.customClass];\n    });\n    var composedDialogRef = composeRefs(focusTrapRef, dialogRef);\n    var draggable = computed(function () {\n      return props.draggable;\n    });\n    useDraggable(dialogRef, headerRef, draggable);\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        ref: unref(composedDialogRef),\n        \"class\": normalizeClass(unref(dialogKls)),\n        style: normalizeStyle(unref(style)),\n        tabindex: \"-1\"\n      }, [createElementVNode(\"header\", {\n        ref_key: \"headerRef\",\n        ref: headerRef,\n        \"class\": normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {}, function () {\n        return [createElementVNode(\"span\", {\n          role: \"heading\",\n          \"aria-level\": _ctx.ariaLevel,\n          \"class\": normalizeClass(unref(ns).e(\"title\"))\n        }, toDisplayString(_ctx.title), 11, _hoisted_1)];\n      }), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n        key: 0,\n        \"aria-label\": unref(t)(\"el.dialog.close\"),\n        \"class\": normalizeClass(unref(ns).e(\"headerbtn\")),\n        type: \"button\",\n        onClick: _cache[0] || (_cache[0] = function ($event) {\n          return _ctx.$emit(\"close\");\n        })\n      }, [createVNode(unref(ElIcon), {\n        \"class\": normalizeClass(unref(ns).e(\"close\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.closeIcon || unref(Close))))];\n        }),\n        _: 1\n      }, 8, [\"class\"])], 10, _hoisted_2)) : createCommentVNode(\"v-if\", true)], 2), createElementVNode(\"div\", {\n        id: unref(bodyId),\n        \"class\": normalizeClass(unref(ns).e(\"body\"))\n      }, [renderSlot(_ctx.$slots, \"default\")], 10, _hoisted_3), _ctx.$slots.footer ? (openBlock(), createElementBlock(\"footer\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).e(\"footer\"))\n      }, [renderSlot(_ctx.$slots, \"footer\")], 2)) : createCommentVNode(\"v-if\", true)], 6);\n    };\n  }\n}));\nvar ElDialogContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"dialog-content.vue\"]]);\nexport { ElDialogContent as default };","map":{"version":3,"names":["name","_useLocale","useLocale","t","Close","CloseComponents","_inject","inject","dialogInjectionKey","dialogRef","headerRef","bodyId","ns","style","_inject2","FOCUS_TRAP_INJECTION_KEY","focusTrapRef","dialogKls","computed","b","is","props","fullscreen","draggable","alignCenter","_defineProperty","m","center","customClass","composedDialogRef","composeRefs","useDraggable"],"sources":["../../../../../../packages/components/dialog/src/dialog-content.vue"],"sourcesContent":["<template>\n  <div :ref=\"composedDialogRef\" :class=\"dialogKls\" :style=\"style\" tabindex=\"-1\">\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :aria-level=\"ariaLevel\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from './constants'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst dialogKls = computed(() => [\n  ns.b(),\n  ns.is('fullscreen', props.fullscreen),\n  ns.is('draggable', props.draggable),\n  ns.is('align-center', props.alignCenter),\n  { [ns.m('center')]: props.center },\n  props.customClass,\n])\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n"],"mappings":";;;;;;;;;;;;;;;;;;iCAyCc;EAAEA,IAAM;AAAA,CAAkB;;;;;;IAHlC,IAAAC,UAAA,GAAQC,SAAU;MAAhBC,CAAA,GAAAF,UAAA,CAAAE,CAAA;IACR,IAAQC,KAAU,GAAAC,eAAA,CAAVD,KAAU;IAMlB,IAAAE,OAAA,GAAoDC,MAAA,CAAOC,kBAAkB;MAArEC,SAAW,GAAAH,OAAA,CAAXG,SAAW;MAAAC,SAAA,GAAAJ,OAAA,CAAAI,SAAA;MAAWC,MAAA,GAAAL,OAAA,CAAAK,MAAA;MAAQC,EAAI,GAAAN,OAAA,CAAJM,EAAI;MAAAC,KAAA,GAAAP,OAAA,CAAAO,KAAA;IACpC,IAAAC,QAAA,GAAmBP,MAAA,CAAOQ,wBAAwB;MAAhDC,YAAiB,GAAAF,QAAA,CAAjBE,YAAiB;IAEnB,IAAAC,SAAA,GAAYC,QAAA,CAAS;MAAA,OAAM,CAC/BN,EAAA,CAAGO,CAAE,IACLP,EAAG,CAAAQ,EAAA,CAAG,YAAc,EAAAC,KAAA,CAAMC,UAAU,GACpCV,EAAG,CAAAQ,EAAA,CAAG,WAAa,EAAAC,KAAA,CAAME,SAAS,GAClCX,EAAG,CAAAQ,EAAA,CAAG,cAAgB,EAAAC,KAAA,CAAMG,WAAW,GAAAC,eAAA,KACpCb,EAAA,CAAGc,CAAA,CAAE,QAAQ,GAAIL,KAAA,CAAMM,MAAO,GACjCN,KAAM,CAAAO,WAAA,CACP;IAAA;IAEK,IAAAC,iBAAA,GAAoBC,WAAY,CAAAd,YAAA,EAAcP,SAAS;IAE7D,IAAMc,SAAY,GAAAL,QAAA,CAAS;MAAA,OAAMG,KAAA,CAAME,SAAS;IAAA;IACnCQ,YAAA,CAAAtB,SAAA,EAAWC,SAAA,EAAWa,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}